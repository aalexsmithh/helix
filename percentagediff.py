import re
import string

def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

def readAndParse():
	f = open("trainingData.txt","r")
	pattern = re.compile("train_id_\d\d\d")
	raw = f.read()
	f.close()
	parsed = []
	tempParsed = []
	for word in raw.split():
		if pattern.match(word):
			if tempParsed:
				parsed.append(tempParsed)
				tempParsed = []
			tempParsed.append(word)
		else:
			tempParsed.append(word.lower())
	parsed.append(tempParsed)
	return parsed

def returnSimilar(threshold, hospitalData, testPatientData):
	solutionSet = []
	for patient in hospitalData:
		similarityPoints=0
		for j in range(1,len(patient)-5):
			#compare current value with testPatientData[i]

			if is_number(patient[j]) and is_number(testPatientData[j]):
				if ((float(patient[j])+float(testPatientData[j])) != 0):
					if (abs(((float(patient[j]) - float(testPatientData[j]))/(0.5*(float(patient[j])+float(testPatientData[j])))))<threshold):
						if (j == 169 or j==170 or j==142):
							similarityPoints += 5
						else:
							similarityPoints+=1
			else:
				if (patient[j] == testPatientData[j]):
					similarityPoints += 1
		ptnumber = int(re.sub("\D", "", patient[0]))
		solutionSet.append([similarityPoints,ptnumber])
	solutionSet.sort()
	return solutionSet[-30:]

def reduction(hospitalData, testPatientData):
	for patient in hospitalData:
			if patient[1] != testPatientData[1]:
				del patient
			elif patient[10] != testPatientData[10]:
				del patient

# def reduction2(plist):
# 	maxval = 0
# 	for i in plist:
# 		hospitalData[plist[1]][-1]




def main():
	hospitalData = readAndParse()
	testPatientData = ['train_id_171', 'm', '38.5', '7', 'no', 'no', 'no', 'no', 'neg', 'neg', 'notdone', 'anthra-hdac', '14', '2', '2', '0', '3', '0', '8.9', '16', '660', '3.3', '0.9', '1.3', '566', '85', '80', '3', '7', '9', '4', '25', '8', '0.614855411', '-1.878122084', '0.278457988', '1.767616613', '3.447484339', '0.834104698', '-0.507003194', '1.286862731', '-0.503368184', '1.087360223', '-1.055476288', '-0.788192758', '-0.099758201', '-0.602720596', '-1.709074794', '0.370297219', '-2.728312559', '-1.007374356', '-0.669629671', '-0.470292647', '-0.033180623', '0.909444698', '0.150876754', '-1.167783834', '2.000120491', '-0.250081814', '-0.363778688', '-1.143599605', '-0.225509778', '-0.187556088', '-1.469304736', '-1.175044165', '-0.817080512', '1.390792387', '-0.430670998', '-0.795866862', '0.110199026', '-0.144618616', '0.448016375', '1.371302894', '1.541699899', '0.110970752', '-0.353861469', '1.486579424', '-0.21738589', '0.560569449', '0.548598094', '-1.655506047', '-0.325168336', '1.2191093', '1.353542948', '-0.317899548', '-0.440891417', '1.956439273', '-1.724061038', '-1.467175718', '0.998751369', '1.667705766', '-0.794435649', '-0.336572934', '0.623267264', '0.985250625', '-0.556115394', '1.932855061', '0.193736822', '-0.716539601', '-0.329335944', '-0.195227631', '-0.664636835', '0.678597978', '0.255295731', '-0.809987978', '1.080005257', '-1.168082316', '-1.001172428', '-0.015687082', '0.342990527', '1.151384006', '-1.138055234', '-1.054799772', '0.804076426', '0.627149381', '0.057674375', '-1.019978142', '-2.211580034', '-0.249162591', '-0.76518139', '-1.416021605', '-0.240831675', '-1.975849887', '-0.601176315', '-1.523892882', '-0.236584597', '-0.363971148', '1.118220635', '0.102075228', '0.168072612', '-0.971075272', '0.246424686', '-0.625504183', '-0.282628406', '-1.088741812', '-0.541937614', '-1.100017596', '0.158908406', '-0.379008758', '-0.756719963', '-0.734109015', '-0.251742433', '-0.977525615', '0.867301218', '-0.332071893', '1.397347068', '0.993648054', '-0.559378136', '0.271369243', '0.001389233', '1.421243603', '1.373838494', '0.674356476', '1.58290115', '-0.719639922', '0.654703937', '0.480436756', '1.199813631', '0.644741134', '-1.304560243', '-0.464481477', '-2.164848621', '-0.648104442', '-0.013474886', '-0.428781804', '0.225070593', '-0.243033166', '-0.56101641', '0.019645943', '-0.667005763', '-0.853498509', '-0.650621076', '0.299014188', '2.138177135', '1.294242749', '0.348147111', '0.178696465', '-1.661933361', '-1.008256044', '1.479693697', '2.342369114', '-0.475989379', '0.716396303', '0.078169199', '-0.628853649', '0.118330504', '-0.451062291', '0.724271216', '-0.329269748', '-1.085219515', '-0.396289526', '-0.867988472', '0.061178324', '-0.482888382', '-1.07290966', '0.384546905', '-0.203289925', '1.312073749', '2.0454388', '0.545011833', '0.387545115', '-0.848886846', '0.382331744', '-1.19260545', '0.37291986', '3.289596408', '0.486701819', '0.227997193', '-0.98075693', '0.418149291', '-0.626255551', '1.270403373', '0.84777849', '0.251769357', '0.413628347', '0.54881914', '-0.82232013', '0.547451622', '-1.172447838', '-0.840143219', '-0.922128976', '-0.126510928', '-0.26173066', '-0.838216648', '-0.191025569', '-0.678442368', '1.487904559', '1.824714774', '1.061557007', '-1.054513011', '-0.7006694', '0.211667024', '-0.269249255', '0.615670618', '-0.073284451', '1.187495073', '-0.855220781', '-1.378944333', '-0.399462178', '-0.918502312', '1.141716471', '0.421770816', '1.814307027', '-0.55755736', '-0.773493567', '-0.719036247', '-1.005860239', '-1.647605282', '-0.951336004', '-0.130505266', '-0.731060317', '0.177472063', '-0.725156678', '2.114900139', '0.544610737', '-0.223974364', '0.012944218', '-0.834210271', '-0.26835958', '1.793007466', '0.656630775', '-0.561956061', '-0.136972994', '-1.592680708']
	threshold = 0.4
	reduction(hospitalData, testPatientData)
	finalanswer =  reduction2(returnSimilar(threshold, hospitalData, testPatientData))
	print finalanswer


if __name__ == "__main__":
	main()


